// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrayTool.Repository;

namespace TrayTool.Repository.Migrations
{
    [DbContext(typeof(TrayToolDb))]
    partial class TrayToolDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("TrayTool.Repository.Model.ArgumentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Concatenator")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ItemEntityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemEntityId");

                    b.ToTable("Arguments");
                });

            modelBuilder.Entity("TrayTool.Repository.Model.BaseModelEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("BaseModel");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseModelEntity");
                });

            modelBuilder.Entity("TrayTool.Repository.Model.SeperatorEntity", b =>
                {
                    b.HasBaseType("TrayTool.Repository.Model.BaseModelEntity");

                    b.Property<byte[]>("Image")
                        .HasColumnType("BLOB");

                    b.Property<string>("ImagePath")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("TEXT");

                    b.HasIndex("ParentId");

                    b.HasDiscriminator().HasValue("SeperatorEntity");
                });

            modelBuilder.Entity("TrayTool.Repository.Model.AbstractItemEntity", b =>
                {
                    b.HasBaseType("TrayTool.Repository.Model.SeperatorEntity");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("AbstractItemEntity");
                });

            modelBuilder.Entity("TrayTool.Repository.Model.DirectoryEntity", b =>
                {
                    b.HasBaseType("TrayTool.Repository.Model.AbstractItemEntity");

                    b.HasDiscriminator().HasValue("DirectoryEntity");
                });

            modelBuilder.Entity("TrayTool.Repository.Model.ItemEntity", b =>
                {
                    b.HasBaseType("TrayTool.Repository.Model.AbstractItemEntity");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("ItemEntity");
                });

            modelBuilder.Entity("TrayTool.Repository.Model.ArgumentEntity", b =>
                {
                    b.HasOne("TrayTool.Repository.Model.ItemEntity", null)
                        .WithMany("Arguments")
                        .HasForeignKey("ItemEntityId");
                });

            modelBuilder.Entity("TrayTool.Repository.Model.SeperatorEntity", b =>
                {
                    b.HasOne("TrayTool.Repository.Model.DirectoryEntity", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("TrayTool.Repository.Model.DirectoryEntity", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("TrayTool.Repository.Model.ItemEntity", b =>
                {
                    b.Navigation("Arguments");
                });
#pragma warning restore 612, 618
        }
    }
}
